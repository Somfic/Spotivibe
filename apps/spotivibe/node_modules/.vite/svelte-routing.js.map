{
  "version": 3,
  "sources": ["../../../../node_modules/svelte-routing/src/index.js", "../../../../node_modules/svelte-routing/src/history.js", "../../../../node_modules/svelte-routing/src/utils.js", "../../../../node_modules/svelte-routing/src/actions.js"],
  "sourcesContent": ["export { default as Router } from \"./Router.svelte\";\nexport { default as Route } from \"./Route.svelte\";\nexport { default as Link } from \"./Link.svelte\";\nexport { navigate } from \"./history.js\";\nexport { link, links } from \"./actions.js\";\n", "/**\n * Adapted from https://github.com/reach/router/blob/b60e6dd781d5d3a4bdaaf4de665649c0f6a7e78d/src/lib/history.js\n *\n * https://github.com/reach/router/blob/master/LICENSE\n * */\n\nfunction getLocation(source) {\n  return {\n    ...source.location,\n    state: source.history.state,\n    key: (source.history.state && source.history.state.key) || \"initial\"\n  };\n}\n\nfunction createHistory(source, options) {\n  const listeners = [];\n  let location = getLocation(source);\n\n  return {\n    get location() {\n      return location;\n    },\n\n    listen(listener) {\n      listeners.push(listener);\n\n      const popstateListener = () => {\n        location = getLocation(source);\n        listener({ location, action: \"POP\" });\n      };\n\n      source.addEventListener(\"popstate\", popstateListener);\n\n      return () => {\n        source.removeEventListener(\"popstate\", popstateListener);\n\n        const index = listeners.indexOf(listener);\n        listeners.splice(index, 1);\n      };\n    },\n\n    navigate(to, { state, replace = false } = {}) {\n      state = { ...state, key: Date.now() + \"\" };\n      // try...catch iOS Safari limits to 100 pushState calls\n      try {\n        if (replace) {\n          source.history.replaceState(state, null, to);\n        } else {\n          source.history.pushState(state, null, to);\n        }\n      } catch (e) {\n        source.location[replace ? \"replace\" : \"assign\"](to);\n      }\n\n      location = getLocation(source);\n      listeners.forEach(listener => listener({ location, action: \"PUSH\" }));\n    }\n  };\n}\n\n// Stores history entries in memory for testing or other platforms like Native\nfunction createMemorySource(initialPathname = \"/\") {\n  let index = 0;\n  const stack = [{ pathname: initialPathname, search: \"\" }];\n  const states = [];\n\n  return {\n    get location() {\n      return stack[index];\n    },\n    addEventListener(name, fn) {},\n    removeEventListener(name, fn) {},\n    history: {\n      get entries() {\n        return stack;\n      },\n      get index() {\n        return index;\n      },\n      get state() {\n        return states[index];\n      },\n      pushState(state, _, uri) {\n        const [pathname, search = \"\"] = uri.split(\"?\");\n        index++;\n        stack.push({ pathname, search });\n        states.push(state);\n      },\n      replaceState(state, _, uri) {\n        const [pathname, search = \"\"] = uri.split(\"?\");\n        stack[index] = { pathname, search };\n        states[index] = state;\n      }\n    }\n  };\n}\n\n// Global history uses window.history as the source if available,\n// otherwise a memory history\nconst canUseDOM = Boolean(\n  typeof window !== \"undefined\" &&\n    window.document &&\n    window.document.createElement\n);\nconst globalHistory = createHistory(canUseDOM ? window : createMemorySource());\nconst { navigate } = globalHistory;\n\nexport { globalHistory, navigate, createHistory, createMemorySource };\n", "/**\n * Adapted from https://github.com/reach/router/blob/b60e6dd781d5d3a4bdaaf4de665649c0f6a7e78d/src/lib/utils.js\n *\n * https://github.com/reach/router/blob/master/LICENSE\n * */\n\nconst paramRe = /^:(.+)/;\n\nconst SEGMENT_POINTS = 4;\nconst STATIC_POINTS = 3;\nconst DYNAMIC_POINTS = 2;\nconst SPLAT_PENALTY = 1;\nconst ROOT_POINTS = 1;\n\n/**\n * Check if `string` starts with `search`\n * @param {string} string\n * @param {string} search\n * @return {boolean}\n */\nexport function startsWith(string, search) {\n  return string.substr(0, search.length) === search;\n}\n\n/**\n * Check if `segment` is a root segment\n * @param {string} segment\n * @return {boolean}\n */\nfunction isRootSegment(segment) {\n  return segment === \"\";\n}\n\n/**\n * Check if `segment` is a dynamic segment\n * @param {string} segment\n * @return {boolean}\n */\nfunction isDynamic(segment) {\n  return paramRe.test(segment);\n}\n\n/**\n * Check if `segment` is a splat\n * @param {string} segment\n * @return {boolean}\n */\nfunction isSplat(segment) {\n  return segment[0] === \"*\";\n}\n\n/**\n * Split up the URI into segments delimited by `/`\n * @param {string} uri\n * @return {string[]}\n */\nfunction segmentize(uri) {\n  return (\n    uri\n      // Strip starting/ending `/`\n      .replace(/(^\\/+|\\/+$)/g, \"\")\n      .split(\"/\")\n  );\n}\n\n/**\n * Strip `str` of potential start and end `/`\n * @param {string} str\n * @return {string}\n */\nfunction stripSlashes(str) {\n  return str.replace(/(^\\/+|\\/+$)/g, \"\");\n}\n\n/**\n * Score a route depending on how its individual segments look\n * @param {object} route\n * @param {number} index\n * @return {object}\n */\nfunction rankRoute(route, index) {\n  const score = route.default\n    ? 0\n    : segmentize(route.path).reduce((score, segment) => {\n        score += SEGMENT_POINTS;\n\n        if (isRootSegment(segment)) {\n          score += ROOT_POINTS;\n        } else if (isDynamic(segment)) {\n          score += DYNAMIC_POINTS;\n        } else if (isSplat(segment)) {\n          score -= SEGMENT_POINTS + SPLAT_PENALTY;\n        } else {\n          score += STATIC_POINTS;\n        }\n\n        return score;\n      }, 0);\n\n  return { route, score, index };\n}\n\n/**\n * Give a score to all routes and sort them on that\n * @param {object[]} routes\n * @return {object[]}\n */\nfunction rankRoutes(routes) {\n  return (\n    routes\n      .map(rankRoute)\n      // If two routes have the exact same score, we go by index instead\n      .sort((a, b) =>\n        a.score < b.score ? 1 : a.score > b.score ? -1 : a.index - b.index\n      )\n  );\n}\n\n/**\n * Ranks and picks the best route to match. Each segment gets the highest\n * amount of points, then the type of segment gets an additional amount of\n * points where\n *\n *  static > dynamic > splat > root\n *\n * This way we don't have to worry about the order of our routes, let the\n * computers do it.\n *\n * A route looks like this\n *\n *  { path, default, value }\n *\n * And a returned match looks like:\n *\n *  { route, params, uri }\n *\n * @param {object[]} routes\n * @param {string} uri\n * @return {?object}\n */\nfunction pick(routes, uri) {\n  let match;\n  let default_;\n\n  const [uriPathname] = uri.split(\"?\");\n  const uriSegments = segmentize(uriPathname);\n  const isRootUri = uriSegments[0] === \"\";\n  const ranked = rankRoutes(routes);\n\n  for (let i = 0, l = ranked.length; i < l; i++) {\n    const route = ranked[i].route;\n    let missed = false;\n\n    if (route.default) {\n      default_ = {\n        route,\n        params: {},\n        uri\n      };\n      continue;\n    }\n\n    const routeSegments = segmentize(route.path);\n    const params = {};\n    const max = Math.max(uriSegments.length, routeSegments.length);\n    let index = 0;\n\n    for (; index < max; index++) {\n      const routeSegment = routeSegments[index];\n      const uriSegment = uriSegments[index];\n\n      if (routeSegment !== undefined && isSplat(routeSegment)) {\n        // Hit a splat, just grab the rest, and return a match\n        // uri:   /files/documents/work\n        // route: /files/* or /files/*splatname\n        const splatName = routeSegment === \"*\" ? \"*\" : routeSegment.slice(1);\n\n        params[splatName] = uriSegments\n          .slice(index)\n          .map(decodeURIComponent)\n          .join(\"/\");\n        break;\n      }\n\n      if (uriSegment === undefined) {\n        // URI is shorter than the route, no match\n        // uri:   /users\n        // route: /users/:userId\n        missed = true;\n        break;\n      }\n\n      let dynamicMatch = paramRe.exec(routeSegment);\n\n      if (dynamicMatch && !isRootUri) {\n        const value = decodeURIComponent(uriSegment);\n        params[dynamicMatch[1]] = value;\n      } else if (routeSegment !== uriSegment) {\n        // Current segments don't match, not dynamic, not splat, so no match\n        // uri:   /users/123/settings\n        // route: /users/:id/profile\n        missed = true;\n        break;\n      }\n    }\n\n    if (!missed) {\n      match = {\n        route,\n        params,\n        uri: \"/\" + uriSegments.slice(0, index).join(\"/\")\n      };\n      break;\n    }\n  }\n\n  return match || default_ || null;\n}\n\n/**\n * Check if the `path` matches the `uri`.\n * @param {string} path\n * @param {string} uri\n * @return {?object}\n */\nfunction match(route, uri) {\n  return pick([route], uri);\n}\n\n/**\n * Add the query to the pathname if a query is given\n * @param {string} pathname\n * @param {string} [query]\n * @return {string}\n */\nfunction addQuery(pathname, query) {\n  return pathname + (query ? `?${query}` : \"\");\n}\n\n/**\n * Resolve URIs as though every path is a directory, no files. Relative URIs\n * in the browser can feel awkward because not only can you be \"in a directory\",\n * you can be \"at a file\", too. For example:\n *\n *  browserSpecResolve('foo', '/bar/') => /bar/foo\n *  browserSpecResolve('foo', '/bar') => /foo\n *\n * But on the command line of a file system, it's not as complicated. You can't\n * `cd` from a file, only directories. This way, links have to know less about\n * their current path. To go deeper you can do this:\n *\n *  <Link to=\"deeper\"/>\n *  // instead of\n *  <Link to=`{${props.uri}/deeper}`/>\n *\n * Just like `cd`, if you want to go deeper from the command line, you do this:\n *\n *  cd deeper\n *  # not\n *  cd $(pwd)/deeper\n *\n * By treating every path as a directory, linking to relative paths should\n * require less contextual information and (fingers crossed) be more intuitive.\n * @param {string} to\n * @param {string} base\n * @return {string}\n */\nfunction resolve(to, base) {\n  // /foo/bar, /baz/qux => /foo/bar\n  if (startsWith(to, \"/\")) {\n    return to;\n  }\n\n  const [toPathname, toQuery] = to.split(\"?\");\n  const [basePathname] = base.split(\"?\");\n  const toSegments = segmentize(toPathname);\n  const baseSegments = segmentize(basePathname);\n\n  // ?a=b, /users?b=c => /users?a=b\n  if (toSegments[0] === \"\") {\n    return addQuery(basePathname, toQuery);\n  }\n\n  // profile, /users/789 => /users/789/profile\n  if (!startsWith(toSegments[0], \".\")) {\n    const pathname = baseSegments.concat(toSegments).join(\"/\");\n\n    return addQuery((basePathname === \"/\" ? \"\" : \"/\") + pathname, toQuery);\n  }\n\n  // ./       , /users/123 => /users/123\n  // ../      , /users/123 => /users\n  // ../..    , /users/123 => /\n  // ../../one, /a/b/c/d   => /a/b/one\n  // .././one , /a/b/c/d   => /a/b/c/one\n  const allSegments = baseSegments.concat(toSegments);\n  const segments = [];\n\n  allSegments.forEach(segment => {\n    if (segment === \"..\") {\n      segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return addQuery(\"/\" + segments.join(\"/\"), toQuery);\n}\n\n/**\n * Combines the `basepath` and the `path` into one path.\n * @param {string} basepath\n * @param {string} path\n */\nfunction combinePaths(basepath, path) {\n  return `${stripSlashes(\n    path === \"/\" ? basepath : `${stripSlashes(basepath)}/${stripSlashes(path)}`\n  )}/`;\n}\n\n/**\n * Decides whether a given `event` should result in a navigation or not.\n * @param {object} event\n */\nfunction shouldNavigate(event) {\n  return (\n    !event.defaultPrevented &&\n    event.button === 0 &&\n    !(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey)\n  );\n}\n\nfunction hostMatches(anchor) {\n  const host = location.host\n  return (\n    anchor.host == host ||\n    // svelte seems to kill anchor.host value in ie11, so fall back to checking href\n    anchor.href.indexOf(`https://${host}`) === 0 ||\n    anchor.href.indexOf(`http://${host}`) === 0\n  )\n}\n\nexport { stripSlashes, pick, match, resolve, combinePaths, shouldNavigate, hostMatches };\n", "import { navigate } from \"./history.js\";\nimport { shouldNavigate, hostMatches } from \"./utils.js\";\n\n/**\n * A link action that can be added to <a href=\"\"> tags rather\n * than using the <Link> component.\n *\n * Example:\n * ```html\n * <a href=\"/post/{postId}\" use:link>{post.title}</a>\n * ```\n */\nfunction link(node) {\n  function onClick(event) {\n    const anchor = event.currentTarget;\n\n    if (\n      anchor.target === \"\" &&\n      hostMatches(anchor) &&\n      shouldNavigate(event)\n    ) {\n      event.preventDefault();\n      navigate(anchor.pathname + anchor.search, { replace: anchor.hasAttribute(\"replace\") });\n    }\n  }\n\n  node.addEventListener(\"click\", onClick);\n\n  return {\n    destroy() {\n      node.removeEventListener(\"click\", onClick);\n    }\n  };\n}\n\n/**\n * An action to be added at a root element of your application to\n * capture all relative links and push them onto the history stack.\n *\n * Example:\n * ```html\n * <div use:links>\n *   <Router>\n *     <Route path=\"/\" component={Home} />\n *     <Route path=\"/p/:projectId/:docId?\" component={ProjectScreen} />\n *     {#each projects as project}\n *       <a href=\"/p/{project.id}\">{project.title}</a>\n *     {/each}\n *   </Router>\n * </div>\n * ```\n */\nfunction links(node) {\n  function findClosest(tagName, el) {\n    while (el && el.tagName !== tagName) {\n      el = el.parentNode;\n    }\n    return el;\n  }\n\n  function onClick(event) {\n    const anchor = findClosest(\"A\", event.target);\n\n    if (\n      anchor &&\n      anchor.target === \"\" &&\n      hostMatches(anchor) &&\n      shouldNavigate(event) &&\n      !anchor.hasAttribute(\"noroute\")\n    ) {\n      event.preventDefault();\n      navigate(anchor.pathname + anchor.search, { replace: anchor.hasAttribute(\"replace\") });\n    }\n  }\n\n  node.addEventListener(\"click\", onClick);\n\n  return {\n    destroy() {\n      node.removeEventListener(\"click\", onClick);\n    }\n  };\n}\n\nexport { link, links };\n"],
  "mappings": "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",
  "names": []
}
